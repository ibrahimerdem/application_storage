# -*- coding: utf-8 -*-
"""standalone_usage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UIQTcmSH0CKVjASGdFuvWVvXuRlyGZSZ
"""

import numpy as np
import pandas as pd
import tensorflow as tf

from datetime import datetime
from tensorflow import keras
from tensorflow.keras import layers

import warnings
warnings.filterwarnings("ignore")

print(tf.version.VERSION)
print(keras.__version__)

from google.colab import files
util = files.upload()
transformed_model_data = files.upload()

from util import *

df = pd.read_csv("transformed_model_data_t1.csv")

def get_metrics(y_pred, val_set, k=20):
    hitt, pret, ndct = 0, 0, 0
    c_list = val_set["c_ids"]
    counter = len(c_list)
    for i in range(counter):
        rel = val_set["target"][i][-1]
        ret = y_pred[i][-1].argsort()[::-1][:k]
        bl = np.isin(ret, rel)*1
        pre = average_precision(bl)
        ndc = ndcg_k(bl, len(bl))
        h = np.max(bl)
        hitt += h
        pret += pre
        ndct += ndc
    return hitt/counter, pret/counter, ndct/counter

TRAIN_SIZE = 0.8
BATCH_SIZE = 256
N_TIME = 12

pro_max = df["item_id"].astype("int64").max()
rec_max = df["recency"].astype("int64").max()
pay_max = df["payment"].astype("int64").max()
cat_max = df["category"].astype("int64").max()
mon_max = df["month"].astype("int64").max()
day_max = df["dayofweek"].astype("int64").max()
pri_max = df["price"].astype("int64").max()
sin_max = df["c_since"].astype("int64").max()
cust_base = df["c_id"].unique()

random_selection = np.random.rand(len(cust_base)) <= TRAIN_SIZE
val_cust = cust_base[~random_selection]
val_data = df[df["c_id"].isin(val_cust)]
train_data = df[~(df["c_id"].isin(val_cust))]

print("train customers:", train_data["c_id"].nunique())
print("validation customers:", val_data["c_id"].nunique())

train_set = make_data_dict(train_data, N_TIME)
val_set = make_data_dict(val_data, N_TIME)
train_set_ = create_batch_data(train_set, batch=BATCH_SIZE)
val_set_ = create_batch_data(val_set, batch=BATCH_SIZE)

hparams = {
    "bidirect": False,
    "style": "lstm",
    "model": 4,
    "emb_unit": 512,
    "rnn_unit": 400,
    "dropout": 0.8,
    "learning": 0.0001,
    "n_time": N_TIME,
    "item_max": pro_max,
    "price_max": pri_max,
    "recency_max": rec_max,
    "payment_max": pay_max,
    "category_max": cat_max,
    "month_max": mon_max,
    "dayofweek_max": day_max,
    "since_max": sin_max,
    "replication": 0
}

model = model_base(hparams)
model.summary()
hist = model_training(model, train_set_, val_set_)
y_pred = hist.model.predict(val_set_)
get_metrics(y_pred, val_set)